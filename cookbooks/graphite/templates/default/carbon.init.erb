#!/usr/bin/env bash
#
# carbon-<%= @name %>
#
# chkconfig:   - 57 47
# description: carbon-<%= @name %>
# processname: carbon-<%= @name %>


export CC_HOME="<%= @dir %>"
<% @instances.each do |instance| -%>
export PIDFILE_<%= instance.first %>="$CC_HOME/storage/carbon-<%= @name %>-<%= instance.first %>.pid"
<% end -%>
export CC_CONFIG="$CC_HOME/etc/carbon-<%= @name %>.conf"
CC_USER="<%= @user %>"
LOGDIR="/var/log/carbon-<%= @name %>"
CC_LOG="$LOGDIR/carbon-<%= @name %>.log"
<% @instances.each do |instance| -%>
BIN_SCRIPT_<%= instance.first %>="python $CC_HOME/bin/carbon-<%= @name %>.py --instance=<%= instance.first %> start >> $CC_LOG 2>&1"
<% end -%>

if [ -f /etc/init.d/functions ]; then
  . /etc/init.d/functions
fi

start() {

  if [ ! -d "$LOGDIR" ] ; then
    mkdir "$LOGDIR"
  fi

  chown -R $CC_USER:$CC_USER $LOGDIR

  for INSTANCE in <% @instances.each do |instance| -%><%= instance.first %> <% end -%>; do
    PIDFILE="PIDFILE_$INSTANCE"
    BIN_SCRIPT="BIN_SCRIPT_$INSTANCE"
    if [ -f ${!PIDFILE} ]; then
      echo -e "\033[31;1mPID file found in ${!PIDFILE}, already running?\033[0m"
      lj_pid="$(cat ${!PIDFILE})"
      pid_running="$( ps ax | grep 'carbon-<%= @name %>' | grep 'instance=$INSTANCE' | grep $lj_pid )"

      if [ ! -z "$pid_running" ] ; then
        echo -e "\033[31;1mPID $lj_pid still alive, carbon-<%= @name %>-$INSTANCE is already running. Doing nothing\033 [0m"
        continue
      fi
    fi

    echo -e "\033[1mStarting carbon-<%= @name %>-$INSTANCE...\033[0m"
    cd /tmp
    <% if node[:platform_family] == "rhel" %>
    daemon --user $CC_USER ${!BIN_SCRIPT}
    <% else %>
    daemon --user $CC_USER -- ${!BIN_SCRIPT}
    <% end %>
    result=$?

    if [ $result -ne 0 ] ; then
      failure
      echo -e "Carbon-<%= @name.capitalize %>-$INSTANCE did not start successfully"
      echo "See $CC_LOG for details"
      exit 1
    else
      success
      echo -e "Carbon-<%= @name.capitalize %>-$INSTANCE started successfully"
    fi
  done
}



function stop() {
  for INSTANCE in <% @instances.each do |instance| -%><%= instance.first %> <% end -%>; do
    PIDFILE="PIDFILE_$INSTANCE"
    echo -n -e "\033[1mStopping carbon-<%= @name %>-$INSTANCE...\033[0m"

    if [ -z "$SHUTDOWN_WAIT" ]; then
      SHUTDOWN_WAIT=5
    fi

    if [ ! -z "${!PIDFILE}" ]; then
      if [ -f "${!PIDFILE}" ]; then
        kill -0 `cat ${!PIDFILE}` >/dev/null 2>&1
        if [ $? -gt 0 ]; then
          echo "PID file (${!PIDFILE}) found but no matching process was found. Nothing to do."
          return 0
        fi
      else
        echo "PID file (${!PIDFILE}) does not exist. Assuming process has stopped."
        return 0
      fi
    fi

    PID=`cat ${!PIDFILE}`
    kill $PID >/dev/null 2>&1

    if [ ! -z "${!PIDFILE}" ]; then
      if [ -f "${!PIDFILE}" ]; then
        while [ $SHUTDOWN_WAIT -ge 0 ]; do
          kill -0 $PID >/dev/null 2>&1
          if [ $? -gt 0 ]; then
            success
            echo -e "Carbon-<%= @name.capitalize %>-$INSTANCE stopped successfully"
            break
          fi
          if [ $SHUTDOWN_WAIT -gt 0 ]; then
            sleep 1
          fi
          SHUTDOWN_WAIT=`expr $SHUTDOWN_WAIT - 1 `
        done
        # still not dead, we may need to resort to drastic measures
        if [ -f "${!PIDFILE}" ]; then
          kill -0 $PID >/dev/null 2>&1
          if [ $? -eq 0 ]; then
            echo "Application still alive, sleeping for 20 seconds before sending SIGKILL"
            sleep 20
            kill -0 $PID >/dev/null 2>&1
            if [ $? -eq 0 ]; then
              kill -9 $PID >/dev/null 2>&1
              echo "Killed with extreme prejudice"
            else
              echo "Application stopped, no need to use SIGKILL"
            fi
            rm ${!PIDFILE}
          fi
        fi
      fi
    fi
  done
}

restart() {
  stop
  start
}

status() {
  for INSTANCE in <% @instances.each do |instance| -%><%= instance.first %> <% end -%>; do
    PIDFILE="PIDFILE_$INSTANCE"
    # GOT PIDFILE?
    [ -f ${!PIDFILE} ] && pid=$(cat ${!PIDFILE})

    # STALE PID FOUND
    if [[ ! -d "/proc/$pid" && -f ${!PIDFILE} ]]; then
      echo -e "\033[1;31;40m[!] Stale PID found in ${!PIDFILE}\033[0m"
    fi

    if [[ $pid && -d "/proc/$pid" ]]; then
      # RUNNING
      success
      echo -e "Carbon-<%= @name.capitalize %>-$INSTANCE is running with pid $pid"
    else
      # NOT RUNNING
      failure
      echo "Carbon-<%= @name.capitalize %>-$INSTANCE not running"
      return 1
    fi
  done
}


case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    restart
    ;;
  status)
    status $2
    ;;
  *)
    echo $"Usage: $0 {start|stop|restart|status [-v]|}"
    exit 1
esac

exit $?
